name: .NET Core Desktop

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Path: Source/Slithin/  
      Solution_Name: $env:Solution_Path/Slithin.csproj                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: Source/Slithin.Tests/Slithin.Tests.csproj               # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: Deployment/Windows-Store    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: Windows-Store.wapproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      SDK: Source/Slithin.ActionCompiler/Slithin.ActionCompiler.csproj    
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
        
    - name: Copy Changelog File
      run: mv $env:Solution_Path/Changelog.txt ./Dist/Changelog/Changelog.txt
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Changelog
        path: ./Dist/Changelog/Changelog.txt
      
    - name: Publish Windows x86
      run: dotnet publish -c Release -r win-x86 -p:PublishReadyToRun=true --output ./Dist/Win-x86 $env:Solution_Name

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Windows_x86
        path: ./Dist/Win-x86
        
    - name: Publish Windows x64
      run: dotnet publish -c Release -r win-x64 -p:PublishReadyToRun=true --output ./Dist/Win-x64 $env:Solution_Name

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Windows_x64
        path: ./Dist/Win-x64

    - name: Publish OSX x64
      run: dotnet publish -c Release -r osx-x64 --output ./Dist/OSX-x64 $env:Solution_Name

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: OSX_x64
        path: ./Dist/OSX-x64
        
    - name: Publish Linux x64
      run: dotnet publish -c Release -r linux-x64 --output ./Dist/Linux-x64 $env:Solution_Name

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Linux_x64
        path: ./Dist/Linux-x64
        
    - name: Installing dotnet-packaging deb
      run: dotnet tool install --global dotnet-deb
      
    - name: Installing dotnet-packaging rpm
      run: dotnet tool install --global dotnet-rpm
      
    - name: Creating Deb-Package
      run: dotnet deb -r linux-x64 -c Release -o ./Dist/Linux-x64-Deb
      working-directory: Source/Slithin/
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Linux_x64_DEB_Installer
        path: Source/Slithin/Dist/Linux-x64-Deb
      
    - name: Creating Rpm-Package
      run: dotnet rpm -r linux-x64 -c Release -o ./Dist/Linux-x64-Rpm
      working-directory: Source/Slithin/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Linux_x64_RPM_Installer
        path: Source/Slithin/Dist/Linux-x64-Rpm

    - name: Publish SDK Windows
      run: dotnet publish -c Release -r win-x86 -p:PublishReadyToRun=true --output ./Dist/Win-sdk-x86 $env:SDK

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Windows_SDK_x86
        path: ./Dist/Win-sdk-x86
        
    - name: Publish SDK OSX x64
      run: dotnet publish -c Release -r osx-x64 --output ./Dist/OSX-sdk-x64 $env:SDK

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: OSX_SDK_x64
        path: ./Dist/OSX-sdk-x64
        
    - name: Publish SDK Linux x64
      run: dotnet publish -c Release -r linux-x64 --output ./Dist/Linux-sdk-x64 $env:SDK
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Linux_SDK_x64
        path: ./Dist/Linux-sdk-x64
    
