using System;
using System.IO;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Media;
using Avalonia.Media.Imaging;
using Avalonia.Platform;
using Ionic.Zip;
using Slithin.Core;
using Slithin.Core.Services;
using Slithin.Models;
using Slithin.Core.Tools;

namespace Slithin.Tools;

public class BackupTool : ITool
{
    private readonly ILocalisationService _localisationService;
    private readonly IMailboxService _mailboxService;
    private readonly IPathManager _pathManager;

    public BackupTool(
        IPathManager pathManager,
        IMailboxService mailboxService,
        ILocalisationService localisationService)
    {
        _pathManager = pathManager;
        _mailboxService = mailboxService;
        _localisationService = localisationService;
    }

    public IImage Image
    {
        get
        {
            var assets = AvaloniaLocator.Current.GetService<IAssetLoader>();

            return new Bitmap(assets.Open(new Uri("avares://Slithin/Resources/backup.png")));
        }
    }

    public ScriptInfo Info => new("backup", "Backup", "Internal", _localisationService.GetString("Backup all your files"), true, true, false);

    public bool IsConfigurable => false;

    public Control GetModal()
    {
        return null;
    }

    public void Invoke(object data)
    {
        _mailboxService.PostAction(() =>
        {
            NotificationService.Show(_localisationService.GetString("Start Compressing"));

            using (var zip = new ZipFile())
            {
                zip.AddDirectory(Path.Combine(_pathManager.ConfigBaseDir, "Notebooks"), "Notebooks");

                zip.AddDirectory(Path.Combine(_pathManager.ConfigBaseDir, "Templates"), "Templates");

                zip.AddDirectory(Path.Combine(_pathManager.ConfigBaseDir, "Scripts"), "Scripts");

                zip.AddDirectory(Path.Combine(_pathManager.ConfigBaseDir, "Screens"), "Screens");

                zip.AddFile(Path.Combine(_pathManager.ConfigBaseDir, "templates.json"));

                zip.Comment = "This backup was generated by Slithin";

                zip.SaveProgress += (s, e) =>
                {
                    if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry)
                    {
                        NotificationService.ShowProgress(_localisationService.GetStringFormat("Compressing '{0}'", e.CurrentEntry.FileName), e.EntriesSaved, e.EntriesTotal);
                    }
                };

                zip.Save(Path.Combine(_pathManager.BackupsDir,
                    $"Backup_from_{DateTime.Now:yyyy-dd-M--HH-mm-ss}" + ".zip"));
            }
        });
    }
}
